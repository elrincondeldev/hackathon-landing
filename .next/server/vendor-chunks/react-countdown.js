"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-countdown";
exports.ids = ["vendor-chunks/react-countdown"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-countdown/dist/index.es.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-countdown/dist/index.es.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calcTimeDelta: () => (/* binding */ calcTimeDelta),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   formatTimeDelta: () => (/* binding */ formatTimeDelta),\n/* harmony export */   zeroPad: () => (/* binding */ zeroPad)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction zeroPad(value) {\n    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    var strValue = String(value);\n    if (length === 0) return strValue;\n    var match = strValue.match(/(.*?)([0-9]+)(.*)/);\n    var prefix = match ? match[1] : \"\";\n    var suffix = match ? match[3] : \"\";\n    var strNo = match ? match[2] : strValue;\n    var paddedNo = strNo.length >= length ? strNo : (_toConsumableArray(Array(length)).map(function() {\n        return \"0\";\n    }).join(\"\") + strNo).slice(length * -1);\n    return \"\".concat(prefix).concat(paddedNo).concat(suffix);\n}\nvar timeDeltaFormatOptionsDefaults = {\n    daysInHours: false,\n    zeroPadTime: 2\n};\nfunction calcTimeDelta(date) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _options$now = options.now, now = _options$now === void 0 ? Date.now : _options$now, _options$precision = options.precision, precision = _options$precision === void 0 ? 0 : _options$precision, controlled = options.controlled, _options$offsetTime = options.offsetTime, offsetTime = _options$offsetTime === void 0 ? 0 : _options$offsetTime, overtime = options.overtime;\n    var startTimestamp;\n    if (typeof date === \"string\") {\n        startTimestamp = new Date(date).getTime();\n    } else if (date instanceof Date) {\n        startTimestamp = date.getTime();\n    } else {\n        startTimestamp = date;\n    }\n    if (!controlled) {\n        startTimestamp += offsetTime;\n    }\n    var timeLeft = controlled ? startTimestamp : startTimestamp - now();\n    var clampedPrecision = Math.min(20, Math.max(0, precision));\n    var total = Math.round(parseFloat(((overtime ? timeLeft : Math.max(0, timeLeft)) / 1000).toFixed(clampedPrecision)) * 1000);\n    var seconds = Math.abs(total) / 1000;\n    return {\n        total: total,\n        days: Math.floor(seconds / (3600 * 24)),\n        hours: Math.floor(seconds / 3600 % 24),\n        minutes: Math.floor(seconds / 60 % 60),\n        seconds: Math.floor(seconds % 60),\n        milliseconds: Number((seconds % 1 * 1000).toFixed()),\n        completed: total <= 0\n    };\n}\nfunction formatTimeDelta(timeDelta, options) {\n    var days = timeDelta.days, hours = timeDelta.hours, minutes = timeDelta.minutes, seconds = timeDelta.seconds;\n    var _Object$assign = Object.assign(Object.assign({}, timeDeltaFormatOptionsDefaults), options), daysInHours = _Object$assign.daysInHours, zeroPadTime = _Object$assign.zeroPadTime, _Object$assign$zeroPa = _Object$assign.zeroPadDays, zeroPadDays = _Object$assign$zeroPa === void 0 ? zeroPadTime : _Object$assign$zeroPa;\n    var zeroPadTimeLength = Math.min(2, zeroPadTime);\n    var formattedHours = daysInHours ? zeroPad(hours + days * 24, zeroPadTime) : zeroPad(hours, zeroPadTimeLength);\n    return {\n        days: daysInHours ? \"\" : zeroPad(days, zeroPadDays),\n        hours: formattedHours,\n        minutes: zeroPad(minutes, zeroPadTimeLength),\n        seconds: zeroPad(seconds, zeroPadTimeLength)\n    };\n}\nvar Countdown = function(_React$Component) {\n    _inherits(Countdown, _React$Component);\n    var _super = _createSuper(Countdown);\n    function Countdown() {\n        var _this;\n        _classCallCheck(this, Countdown);\n        _this = _super.apply(this, arguments);\n        _this.state = {\n            count: _this.props.count || 3\n        };\n        _this.startCountdown = function() {\n            _this.interval = window.setInterval(function() {\n                var count = _this.state.count - 1;\n                if (count === 0) {\n                    _this.stopCountdown();\n                    _this.props.onComplete && _this.props.onComplete();\n                } else {\n                    _this.setState(function(prevState) {\n                        return {\n                            count: prevState.count - 1\n                        };\n                    });\n                }\n            }, 1000);\n        };\n        _this.stopCountdown = function() {\n            clearInterval(_this.interval);\n        };\n        _this.addTime = function(seconds) {\n            _this.stopCountdown();\n            _this.setState(function(prevState) {\n                return {\n                    count: prevState.count + seconds\n                };\n            }, _this.startCountdown);\n        };\n        return _this;\n    }\n    _createClass(Countdown, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.startCountdown();\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                clearInterval(this.interval);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                return this.props.children ? /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(this.props.children, {\n                    count: this.state.count\n                }) : null;\n            }\n        }\n    ]);\n    return Countdown;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\nCountdown.propTypes = {\n    count: prop_types__WEBPACK_IMPORTED_MODULE_1__.number,\n    children: prop_types__WEBPACK_IMPORTED_MODULE_1__.element,\n    onComplete: prop_types__WEBPACK_IMPORTED_MODULE_1__.func\n};\nvar Countdown$1 = function(_React$Component) {\n    _inherits(Countdown$1, _React$Component);\n    var _super = _createSuper(Countdown$1);\n    function Countdown$1(props) {\n        var _this;\n        _classCallCheck(this, Countdown$1);\n        _this = _super.call(this, props);\n        _this.mounted = false;\n        _this.initialTimestamp = _this.calcOffsetStartTimestamp();\n        _this.offsetStartTimestamp = _this.props.autoStart ? 0 : _this.initialTimestamp;\n        _this.offsetTime = 0;\n        _this.legacyMode = false;\n        _this.legacyCountdownRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n        _this.tick = function() {\n            var timeDelta = _this.calcTimeDelta();\n            var callback = timeDelta.completed && !_this.props.overtime ? undefined : _this.props.onTick;\n            _this.setTimeDeltaState(timeDelta, undefined, callback);\n        };\n        _this.start = function() {\n            if (_this.isStarted()) return;\n            var prevOffsetStartTimestamp = _this.offsetStartTimestamp;\n            _this.offsetStartTimestamp = 0;\n            _this.offsetTime += prevOffsetStartTimestamp ? _this.calcOffsetStartTimestamp() - prevOffsetStartTimestamp : 0;\n            var timeDelta = _this.calcTimeDelta();\n            _this.setTimeDeltaState(timeDelta, \"STARTED\", _this.props.onStart);\n            if (!_this.props.controlled && (!timeDelta.completed || _this.props.overtime)) {\n                _this.clearTimer();\n                _this.interval = window.setInterval(_this.tick, _this.props.intervalDelay);\n            }\n        };\n        _this.pause = function() {\n            if (_this.isPaused()) return;\n            _this.clearTimer();\n            _this.offsetStartTimestamp = _this.calcOffsetStartTimestamp();\n            _this.setTimeDeltaState(_this.state.timeDelta, \"PAUSED\", _this.props.onPause);\n        };\n        _this.stop = function() {\n            if (_this.isStopped()) return;\n            _this.clearTimer();\n            _this.offsetStartTimestamp = _this.calcOffsetStartTimestamp();\n            _this.offsetTime = _this.offsetStartTimestamp - _this.initialTimestamp;\n            _this.setTimeDeltaState(_this.calcTimeDelta(), \"STOPPED\", _this.props.onStop);\n        };\n        _this.isStarted = function() {\n            return _this.isStatus(\"STARTED\");\n        };\n        _this.isPaused = function() {\n            return _this.isStatus(\"PAUSED\");\n        };\n        _this.isStopped = function() {\n            return _this.isStatus(\"STOPPED\");\n        };\n        _this.isCompleted = function() {\n            return _this.isStatus(\"COMPLETED\");\n        };\n        if (props.date) {\n            var timeDelta = _this.calcTimeDelta();\n            _this.state = {\n                timeDelta: timeDelta,\n                status: timeDelta.completed ? \"COMPLETED\" : \"STOPPED\"\n            };\n        } else {\n            _this.legacyMode = true;\n        }\n        return _this;\n    }\n    _createClass(Countdown$1, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                if (this.legacyMode) {\n                    return;\n                }\n                this.mounted = true;\n                if (this.props.onMount) this.props.onMount(this.calcTimeDelta());\n                if (this.props.autoStart) this.start();\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                if (this.legacyMode) {\n                    return;\n                }\n                if (this.props.date !== prevProps.date) {\n                    this.initialTimestamp = this.calcOffsetStartTimestamp();\n                    this.offsetStartTimestamp = this.initialTimestamp;\n                    this.offsetTime = 0;\n                    this.setTimeDeltaState(this.calcTimeDelta());\n                }\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                if (this.legacyMode) {\n                    return;\n                }\n                this.mounted = false;\n                this.clearTimer();\n            }\n        },\n        {\n            key: \"calcTimeDelta\",\n            value: function calcTimeDelta$1() {\n                var _this$props = this.props, date = _this$props.date, now = _this$props.now, precision = _this$props.precision, controlled = _this$props.controlled, overtime = _this$props.overtime;\n                return calcTimeDelta(date, {\n                    now: now,\n                    precision: precision,\n                    controlled: controlled,\n                    offsetTime: this.offsetTime,\n                    overtime: overtime\n                });\n            }\n        },\n        {\n            key: \"calcOffsetStartTimestamp\",\n            value: function calcOffsetStartTimestamp() {\n                return Date.now();\n            }\n        },\n        {\n            key: \"addTime\",\n            value: function addTime(seconds) {\n                this.legacyCountdownRef.current.addTime(seconds);\n            }\n        },\n        {\n            key: \"clearTimer\",\n            value: function clearTimer() {\n                window.clearInterval(this.interval);\n            }\n        },\n        {\n            key: \"isStatus\",\n            value: function isStatus(status) {\n                return this.state.status === status;\n            }\n        },\n        {\n            key: \"setTimeDeltaState\",\n            value: function setTimeDeltaState(timeDelta, status, callback) {\n                var _this2 = this;\n                if (!this.mounted) return;\n                var completing = timeDelta.completed && !this.state.timeDelta.completed;\n                var completedOnStart = timeDelta.completed && status === \"STARTED\";\n                if (completing && !this.props.overtime) {\n                    this.clearTimer();\n                }\n                var onDone = function onDone() {\n                    if (callback) callback(_this2.state.timeDelta);\n                    if (_this2.props.onComplete && (completing || completedOnStart)) {\n                        _this2.props.onComplete(timeDelta, completedOnStart);\n                    }\n                };\n                return this.setState(function(prevState) {\n                    var newStatus = status || prevState.status;\n                    if (timeDelta.completed && !_this2.props.overtime) {\n                        newStatus = \"COMPLETED\";\n                    } else if (!status && newStatus === \"COMPLETED\") {\n                        newStatus = \"STOPPED\";\n                    }\n                    return {\n                        timeDelta: timeDelta,\n                        status: newStatus\n                    };\n                }, onDone);\n            }\n        },\n        {\n            key: \"getApi\",\n            value: function getApi() {\n                return this.api = this.api || {\n                    start: this.start,\n                    pause: this.pause,\n                    stop: this.stop,\n                    isStarted: this.isStarted,\n                    isPaused: this.isPaused,\n                    isStopped: this.isStopped,\n                    isCompleted: this.isCompleted\n                };\n            }\n        },\n        {\n            key: \"getRenderProps\",\n            value: function getRenderProps() {\n                var _this$props2 = this.props, daysInHours = _this$props2.daysInHours, zeroPadTime = _this$props2.zeroPadTime, zeroPadDays = _this$props2.zeroPadDays;\n                var timeDelta = this.state.timeDelta;\n                return Object.assign(Object.assign({}, timeDelta), {\n                    api: this.getApi(),\n                    props: this.props,\n                    formatted: formatTimeDelta(timeDelta, {\n                        daysInHours: daysInHours,\n                        zeroPadTime: zeroPadTime,\n                        zeroPadDays: zeroPadDays\n                    })\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                if (this.legacyMode) {\n                    var _this$props3 = this.props, count = _this$props3.count, _children = _this$props3.children, onComplete = _this$props3.onComplete;\n                    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Countdown, {\n                        ref: this.legacyCountdownRef,\n                        count: count,\n                        onComplete: onComplete\n                    }, _children);\n                }\n                var _this$props4 = this.props, className = _this$props4.className, overtime = _this$props4.overtime, children = _this$props4.children, renderer = _this$props4.renderer;\n                var renderProps = this.getRenderProps();\n                if (renderer) {\n                    return renderer(renderProps);\n                }\n                if (children && this.state.timeDelta.completed && !overtime) {\n                    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(children, {\n                        countdown: renderProps\n                    });\n                }\n                var _renderProps$formatte = renderProps.formatted, days = _renderProps$formatte.days, hours = _renderProps$formatte.hours, minutes = _renderProps$formatte.minutes, seconds = _renderProps$formatte.seconds;\n                return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"span\", {\n                    className: className\n                }, renderProps.total < 0 ? \"-\" : \"\", days, days ? \":\" : \"\", hours, \":\", minutes, \":\", seconds);\n            }\n        }\n    ]);\n    return Countdown$1;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\nCountdown$1.defaultProps = Object.assign(Object.assign({}, timeDeltaFormatOptionsDefaults), {\n    controlled: false,\n    intervalDelay: 1000,\n    precision: 0,\n    autoStart: true\n});\nCountdown$1.propTypes = {\n    date: (0,prop_types__WEBPACK_IMPORTED_MODULE_1__.oneOfType)([\n        (0,prop_types__WEBPACK_IMPORTED_MODULE_1__.instanceOf)(Date),\n        prop_types__WEBPACK_IMPORTED_MODULE_1__.string,\n        prop_types__WEBPACK_IMPORTED_MODULE_1__.number\n    ]),\n    daysInHours: prop_types__WEBPACK_IMPORTED_MODULE_1__.bool,\n    zeroPadTime: prop_types__WEBPACK_IMPORTED_MODULE_1__.number,\n    zeroPadDays: prop_types__WEBPACK_IMPORTED_MODULE_1__.number,\n    controlled: prop_types__WEBPACK_IMPORTED_MODULE_1__.bool,\n    intervalDelay: prop_types__WEBPACK_IMPORTED_MODULE_1__.number,\n    precision: prop_types__WEBPACK_IMPORTED_MODULE_1__.number,\n    autoStart: prop_types__WEBPACK_IMPORTED_MODULE_1__.bool,\n    overtime: prop_types__WEBPACK_IMPORTED_MODULE_1__.bool,\n    className: prop_types__WEBPACK_IMPORTED_MODULE_1__.string,\n    children: prop_types__WEBPACK_IMPORTED_MODULE_1__.element,\n    renderer: prop_types__WEBPACK_IMPORTED_MODULE_1__.func,\n    now: prop_types__WEBPACK_IMPORTED_MODULE_1__.func,\n    onMount: prop_types__WEBPACK_IMPORTED_MODULE_1__.func,\n    onStart: prop_types__WEBPACK_IMPORTED_MODULE_1__.func,\n    onPause: prop_types__WEBPACK_IMPORTED_MODULE_1__.func,\n    onStop: prop_types__WEBPACK_IMPORTED_MODULE_1__.func,\n    onTick: prop_types__WEBPACK_IMPORTED_MODULE_1__.func,\n    onComplete: prop_types__WEBPACK_IMPORTED_MODULE_1__.func\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Countdown$1);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-countdown/dist/index.es.js\n");

/***/ })

};
;